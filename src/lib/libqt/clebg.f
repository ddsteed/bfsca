C***********************************************************
C      angsub.f  -- standard subroutines, to calculate wigner coeffs.
C**********************************************************
C
C
C WIGNER 3J, 6J, AND 9J FUNCTION SUBPROGRAMS.
C NOTE:  ALL ANGULAR MOMENTUM QUANTUM NUMBERS SUPPLIED TO THESE
C        FUNCTIONS ARE INTEGERS WHICH ARE TWICE THE VALUE OF THE
C        ACTUAL ANGULAR MOMENTUM DESIRED.  (THIS ALLOWS FOR HALF-
C        INTEGER VALUES CONVENIENTLY.)  ALSO YOU MUST CALL SETUP
C        ONE TIME BEFORE CALLING ANY OF THESE SO THAT THE RELE-
C        VANT FACTORIALS CAN BE CALCULATED ONCE AND FOR ALL AND
C        STORED, AS IN THE ABOVE EXAMPLE.
C
C**********************************************************C
C
      DOUBLE PRECISION FUNCTION XNINEJ(J11,J12,J13,
     1                          J21,J22,J23,J31,J32,J33)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      KMIN1 = IABS(J11-J33)
      KMIN2 = IABS(J32-J21)
      KMIN3 = IABS(J23-J12)
      KMAX1 = J11+J33
      KMAX2 = J32+J21
      KMAX3 = J23+J12
C
      IF(KMIN2.GT.KMIN1) KMIN1=KMIN2
      IF(KMIN3.GT.KMIN1) KMIN1=KMIN3
      IF(KMAX2.LT.KMAX1) KMAX1=KMAX2
      IF(KMAX3.LT.KMAX1) KMAX1=KMAX3
C
      KMIN1 = KMIN1 + 1
      KMAX1 = KMAX1 + 1
      XNINEJ = 0.D0
      IF(KMIN1.GT.KMAX1) GO TO 1000
      DO 100 K1 = KMIN1,KMAX1,2
      K = K1 - 1
      S1 = SIXJ(J11,J21,J31,J32,J33,K)
      S2 = SIXJ(J12,J22,J32,J21,K,J23)
      S3 = SIXJ(J13,J23,J33,K,J11,J12)
      P = (K+1)*((-1)**K)
      XNINEJ = XNINEJ + P*S1*S2*S3
  100 CONTINUE
 1000 CONTINUE
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION THRJ(J1D,J2D,J3D,M1D,M2D,M3D)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      X1 = J1D/2.D0
      X2 = J2D/2.D0
      X3 = J3D/2.D0
      Y1 = M1D/2.D0
      Y2 = M2D/2.D0
      Y3 = M3D/2.D0
C
C -- NEXT COME THE TRIANGULARITY CHECKS:
C
      IF(J1D+J2D-J3D.LT.0) GO TO 9998
      IF(J2D+J3D-J1D.LT.0) GO TO 9998
      IF(J3D+J1D-J2D.LT.0) GO TO 9998
      IF(J3D.LT.IABS(J1D-J2D)) GO TO 9998
      IF(M1D+M2D+M3D.NE.0) GO TO 9998
      LLL = J1D+J2D+J3D
      IF(2*(LLL/2) .NE. LLL) GO TO 9998
C
      KMIN = (J3D-J1D-M2D)/2
      KMIN1 = KMIN
      KMIN2 = (J3D-J2D+M1D)/2
      IF(KMIN2.LT.KMIN) KMIN=KMIN2
      KMIN = (-1)*KMIN
      KMAX = X1+X2-X3 +0.1D0
      KMAX1 = KMAX
      KMAX2 = X1-Y1
      KMAX3 = X2+Y2
      IF(KMAX2.LT.KMAX) KMAX=KMAX2
      IF(KMAX3.LT.KMAX) KMAX=KMAX3
      IF(KMIN.LT.0) KMIN = 0
      IF(KMIN.GT.KMAX) GO TO 9998
C
      JMIN = KMIN+1
      JMAX = KMAX+1
      TERM1 = FRONTL(X1,X2,X3,Y1,Y2,Y3)
      MSIGN = (-1)**((J1D-J2D-M3D)/2)
      SUM = 0.D0
      DO 10 I1 = JMIN,JMAX
      I = I1 - 1
      TERM2 = FL(I1)+FL(KMIN1+I1)+FL(KMIN2+I1)
      TERM2 = TERM2+FL(KMAX1-I+1)+FL(KMAX2-I+1)+FL(KMAX3-I+1)
      TERM= DEXP(TERM1-TERM2)
      TERM = TERM*MSIGN*((-1)**I)
      SUM = SUM + TERM
  10  CONTINUE
      THRJ = SUM
      GO TO 9999
 9998 THRJ = 0.D0
 9999 CONTINUE
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION FL(I)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/FACTOR/FACL(200)
      FL = FACL(I)
      RETURN
      END
C
C** ** **
C-- THIS SUBROUTINE INITIALIZES BY FINDING THE LOGARITHM
C---OF THE FIRST 199 FACTORIALS AND STORING THEM.
C
      SUBROUTINE SETUP
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/FACTOR/FACL(200)
      N = 199
      FACL(1) = 0.D0
      DO 100 I = 2,N
      I1 = I - 1
      FACL(I) = FACL(I1) + DLOG(I1*1.D0)
  100 CONTINUE
      RETURN
      END
C** ** **
C
      DOUBLE PRECISION FUNCTION FRONTL(X1,X2,X3,Y1,Y2,Y3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      L1 = X1+X2-X3 +1.1D0
      L2 = X2+X3-X1 +1.1D0
      L3 = X3+X1-X2 +1.1D0
      L4 = X1+X2+X3+1+1.1D0
      L5 = X1+Y1+1.1D0
      L6 = X1-Y1+1.1D0
      L7 = X2+Y2+1.1D0
      L8 = X2-Y2+1.1D0
      L9 = X3+Y3+1.1D0
      L10 = X3-Y3+1.1D0
      FRONTL = FL(L1)+FL(L2)+FL(L3)-FL(L4)+FL(L5)+FL(L6)
      FRONTL = FRONTL +FL(L7)+FL(L8)+FL(L9)+FL(L10)
      FRONTL = FRONTL/2.D0
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION SIXJ(J1D,J2D,J3D,J4D,J5D,J6D)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C -- CHECK THAT TRIANGULARITY CONDITIONS ARE SATISFIED.
C
      IF(J3D.LT.IABS(J1D-J2D) .OR. J3D.GT.J1D+J2D) GO TO 9998
      IF(J6D.LT.IABS(J4D-J2D) .OR. J6D.GT.J4D+J2D) GO TO 9998
      IF(J6D.LT.IABS(J1D-J5D) .OR. J6D.GT.J1D+J5D) GO TO 9998
      IF(J3D.LT.IABS(J4D-J5D) .OR. J3D.GT.J4D+J5D) GO TO 9998
      K1=J1D+J2D+J3D
      K2=J4D+J2D+J6D
      K3=J6D+J1D+J5D
      K4=J3D+J4D+J5D
      IF(2*(K1/2).NE.K1 .OR. 2*(K2/2).NE.K2) GO TO 9998
      IF(2*(K3/2).NE.K3 .OR. 2*(K4/2).NE.K4) GO TO 9998
C
C -- NOW GO AHEAD AND CALCULATE THE SIXJ.
C
      JM1 = (J1D+J2D+J3D)/2
      JM2 = (J1D+J5D+J6D)/2
      JM3 = (J4D+J2D+J6D)/2
      JM4 = (J4D+J5D+J3D)/2
      JX1 = (J1D+J2D+J4D+J5D)/2
      JX2 = (J2D+J3D+J5D+J6D)/2
      JX3 = (J3D+J1D+J6D+J4D)/2
C
      JM = JM1
      IF(JM2.GT.JM) JM = JM2
      IF(JM3.GT.JM) JM = JM3
      IF(JM4.GT.JM) JM = JM4
      JX = JX1
      IF(JX2.LT.JX) JX = JX2
      IF(JX3.LT.JX) JX = JX3
      KM = JM+1
      KX = JX+1
      IF(KM.GT.KX) GO TO 9998
      TERM1 = FRTSJL(J1D,J2D,J3D,J4D,J5D,J6D)
      SIXJ = 0.D0
      DO 10 I1 = KM,KX
      I = I1 - 1
      TERM2 = FL(I+2)-FL(I+1-JM1)-FL(I+1-JM2)-FL(I+1-JM3)
      TERM2 = TERM2-FL(I+1-JM4)-FL(JX1-I+1)-FL(JX2-I+1)
      TERM2 = TERM2 -FL(JX3-I+1)
      TERM = DEXP(TERM1+TERM2) * ((-1)**I)
      SIXJ = SIXJ + TERM
   10 CONTINUE
      GO TO 9999
 9998 CONTINUE
      SIXJ = 0.D0
 9999 CONTINUE
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION FRTSJL(J1D,J2D,J3D,J4D,J5D,J6D)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      FRTSJL = DL(J1D,J2D,J3D) + DL(J1D,J5D,J6D)
      FRTSJL = FRTSJL + DL(J4D,J2D,J6D) + DL(J4D,J5D,J3D)
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION DL(J1D,J2D,J3D)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      L1 = (J1D+J2D-J3D)/2
      L2 = (J2D+J3D-J1D)/2
      L3 = (J3D+J1D-J2D)/2
      L4 = (J1D+J2D+J3D)/2 + 1
      DL = FL(L1+1)+FL(L2+1)+FL(L3+1)-FL(L4+1)
      DL = DL/2.D0
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION CLEBSH(J1D,J2D,JD,M1D,M2D,MD)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      CLEBSH = 0.D0
      IF(M1D+M2D.NE.MD) GO TO 100
      MMD = -MD
      Q = THRJ(J1D,J2D,JD,M1D,M2D,MMD)
      PHASE = ((-1)**(20 + (J2D-J1D-MD)/2))
      CLEBSH = Q*PHASE*DSQRT(JD+1.D0)
  100 CONTINUE
      RETURN
      END
